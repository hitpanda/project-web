{"version":3,"sources":["constants/ActionTypes.js","actions/index.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/ListItem.js","components/TaskList.js","App.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/isEditTask.js","reducers/filterTable.js","reducers/searchTask.js","reducers/sortTask.js","reducers/index.js","index.js"],"names":["SAVE_TASK","TOGGLE_FORM","CLOSE_FORM","OPEN_FORM","UPDATE_TASK_STATUS","DELETE_TASK","EDIT_TASK","FILTER_TABLE","SEARCH","SORT","openForm","type","types","editTask","task","TaskForm","props","handleClearForm","setState","id","name","status","handleCloseForm","onCloseForm","handleChange","event","target","value","handleSubmit","preventDefault","onSaveTask","state","this","taskEditing","nextProps","className","onClick","onSubmit","onChange","required","React","Component","connect","isEditTask","dispatch","actions","Search","onSearch","handleSearch","keyword","placeholder","searchTask","Sort","handleSort","sortBy","sortValue","onSort","by","sort","role","sortTask","Control","ListItem","handleUpdateTaskStatus","onUpdateTaskStatus","handleDeleteTask","onDeleteTask","handleEditTask","onOpenForm","onEditTask","index","TaskList","filter","filterTable","onFilterTable","tasks","toLowerCase","indexOf","a","b","taskElement","map","App","handleToggleForm","onToggleForm","onClearTask","isDisplayForm","taskFormElement","s4","Math","floor","random","toString","substring","generateId","data","JSON","parse","localStorage","getItem","initialState","myReducer","action","push","indexSave","_","findIndex","e","setItem","stringify","indexUpdate","indexDelete","splice","parseInt","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c629fcac.chunk.js","sourcesContent":["export const SAVE_TASK = 'SAVE_TASK'\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM'\r\nexport const CLOSE_FORM = 'CLOSE_FORM'\r\nexport const OPEN_FORM = 'OPEN_FORM'\r\nexport const UPDATE_TASK_STATUS = 'UPDATE_TASK_STATUS'\r\nexport const DELETE_TASK = 'DELETE_TASK'\r\nexport const EDIT_TASK = 'EDIT_TASK'\r\nexport const FILTER_TABLE = 'FILTER_TABLE'\r\nexport const SEARCH = 'SEARCH'\r\nexport const SORT = 'SORT'","import * as types from '../constants/ActionTypes'\r\n\r\nexport const saveTask = (task) => {\r\n   return {\r\n      type: types.SAVE_TASK,\r\n      task\r\n   }\r\n}\r\n\r\nexport const toggleForm = () => {\r\n   return {\r\n      type: types.TOGGLE_FORM\r\n   }\r\n}\r\n\r\nexport const closeForm = () => {\r\n   return {\r\n      type: types.CLOSE_FORM\r\n   }\r\n}\r\n\r\nexport const openForm = () => {\r\n   return {\r\n      type: types.OPEN_FORM\r\n   }\r\n}\r\n\r\nexport const updateTaskStatus = (id) => {\r\n   return {\r\n      type: types.UPDATE_TASK_STATUS,\r\n      id\r\n   }\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n   return {\r\n      type: types.DELETE_TASK,\r\n      id\r\n   }\r\n}\r\n\r\nexport const editTask = (task) => {\r\n   return {\r\n      type: types.EDIT_TASK,\r\n      task\r\n   }\r\n}\r\n\r\nexport const filterTable = (filter) => {\r\n   return {\r\n      type: types.FILTER_TABLE,\r\n      filter // {filterName, filterStatus}\r\n   }\r\n}\r\n\r\nexport const searchTask = (keyword) => {\r\n   return {\r\n      type: types.SEARCH,\r\n      keyword\r\n   }\r\n}\r\n\r\nexport const sortTask = (sort) => {\r\n   return {\r\n      type: types.SORT,\r\n      sort\r\n   }\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../actions/index'\r\n\r\nclass TaskForm extends React.Component {\r\n   constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n         id: '',\r\n         name: '',\r\n         status: false,\r\n      }\r\n   }\r\n   \r\n   UNSAFE_componentWillMount() {\r\n      if (this.props.taskEditing) {\r\n         this.setState({\r\n            id: this.props.taskEditing.id,\r\n            name: this.props.taskEditing.name,\r\n            status: this.props.taskEditing.status,\r\n         })\r\n      }\r\n   }\r\n\r\n   handleClearForm = () => {\r\n      this.setState({\r\n         id: '',\r\n         name: '',\r\n         status: false,\r\n      })\r\n   }\r\n\r\n   UNSAFE_componentWillReceiveProps(nextProps) {\r\n      if (nextProps && nextProps.taskEditing) {\r\n         this.setState({\r\n            id: nextProps.taskEditing.id,\r\n            name: nextProps.taskEditing.name,\r\n            status: nextProps.taskEditing.status,\r\n         })\r\n      } else if (!nextProps.taskEditing) {\r\n         this.handleClearForm()\r\n      }\r\n   }\r\n\r\n   handleCloseForm = () => {\r\n      this.props.onCloseForm()\r\n   }\r\n\r\n   handleChange = (event) => {\r\n      var target = event.target\r\n      var name = target.name\r\n      var value = target.value\r\n      if (name === 'status') {\r\n         value = target.value === 'true' ? true : false\r\n      }\r\n      this.setState({\r\n         [name]: value\r\n      })\r\n   }\r\n\r\n   handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      this.props.onSaveTask(this.state)\r\n      this.handleClearForm()\r\n      this.handleCloseForm()\r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <div className=\"panel\">\r\n            <div className=\"panel-heading\">\r\n               <h4>{this.state.id !== '' ? 'Sửa Công Việc' : 'Thêm Công Việc'}</h4>\r\n               <i\r\n                  className=\"far fa-times-circle\"\r\n                  onClick={this.handleCloseForm}\r\n               ></i>\r\n            </div>\r\n            <div className=\"panel-body\">\r\n               <form onSubmit={this.handleSubmit}>\r\n                  <div className=\"form-group\">\r\n                     <label>Tên:</label>\r\n                     <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        className=\"form-control\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleChange}\r\n                        required\r\n                     />\r\n                  </div>\r\n                  <br/>\r\n                  <div className=\"form-group\">\r\n                     <label>Trạng Thái:</label>\r\n                     <select\r\n                        className=\"form-control\"\r\n                        name=\"status\"\r\n                        value={this.state.status}\r\n                        onChange={this.handleChange}\r\n                     >\r\n                        <option value={true}>Kích hoạt</option>\r\n                        <option value={false}>Ẩn</option>\r\n                     </select>\r\n                  </div>\r\n                  <br/>\r\n                  <div className=\"text-center\">\r\n                     <button type=\"submit\" className=\"btn btn-success\">\r\n                        <i className=\"fas fa-plus\"></i>&nbsp;\r\n                        Lưu Lại\r\n                     </button>&nbsp;\r\n                     <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger\"\r\n                        onClick={this.handleClearForm}\r\n                     >\r\n                        <i className=\"fas fa-times\"></i>&nbsp;\r\n                        Hủy Bỏ\r\n                     </button>\r\n                  </div>\r\n               </form>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n      taskEditing: state.isEditTask\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n   return {\r\n      onSaveTask: (task) => {\r\n         dispatch(actions.saveTask(task))\r\n      },\r\n      onCloseForm: () => {\r\n         dispatch(actions.closeForm())\r\n      }\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm)","import React from 'react'\r\nimport * as actions from '../actions/index'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Search extends React.Component {\r\n   handleChange = (event) => {\r\n      this.props.onSearch(event.target.value)\r\n   }\r\n\r\n   handleSearch = () => {\r\n      this.props.onSearch(this.props.keyword)\r\n   }\r\n\r\n   render() {\r\n      var {keyword} = this.props\r\n\r\n      return (\r\n         <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n            <div className=\"input-group\">\r\n               <input \r\n                  type=\"text\" \r\n                  className=\"form-control\" \r\n                  placeholder=\"Nhập từ khóa\" \r\n                  name=\"keyword\"\r\n                  value={keyword}\r\n                  onChange={this.handleChange}\r\n               />\r\n               <button \r\n                  type=\"button\" \r\n                  className=\"btn btn-primary\"\r\n                  onClick={this.handleSearch}\r\n               >\r\n                  <i className=\"fas fa-search\"></i>&nbsp;\r\n                  Tìm\r\n               </button>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      keyword: state.searchTask\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n   return {\r\n      onSearch: (keyword) => {\r\n         dispatch(actions.searchTask(keyword))\r\n      }\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search)","import React from 'react'\r\nimport * as actions from '../actions/index'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Sort extends React.Component {\r\n   handleSort = (sortBy, sortValue) => {\r\n      this.props.onSort({\r\n         by: sortBy,\r\n         value: sortValue\r\n      })\r\n   }\r\n\r\n   render() {\r\n      var {sort} = this.props\r\n      \r\n      return (\r\n         <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n            <div className=\"dropdown\">\r\n               <button className=\"btn btn-primary dropdown-toggle\" type=\"button\">\r\n                  Sắp xếp\r\n                  <ul className=\"dropdown-menu\">\r\n                     <li onClick={() => this.handleSort('name', 1)}>\r\n                        <p\r\n                           role=\"button\"\r\n                           className={(sort.by === 'name' && sort.value === 1) ? 'dropdown-item sort_selected' : 'dropdown-item'}\r\n                        >\r\n                           <i className=\"fas fa-sort-alpha-down\"></i>&nbsp;\r\n                           Tên A-Z\r\n                        </p>\r\n                     </li>\r\n                     <li onClick={() => this.handleSort('name', -1)}>\r\n                        <p\r\n                           role=\"button\"\r\n                           className={(sort.by === 'name' && sort.value === -1) ? 'dropdown-item sort_selected' : 'dropdown-item'}\r\n                        >\r\n                           <i className=\"fas fa-sort-alpha-up\"></i>&nbsp;\r\n                           Tên Z-A\r\n                        </p>\r\n                     </li>\r\n                     <li role=\"separator\" className=\"divider\"></li>\r\n                     <li onClick={() => this.handleSort('status', 1)}>\r\n                        <p\r\n                           role=\"button\"\r\n                           className={(sort.by === 'status' && sort.value === 1) ? 'dropdown-item sort_selected' : 'dropdown-item'}\r\n                        >Trạng Thái Kích Hoạt</p>\r\n                     </li>\r\n                     <li onClick={() => this.handleSort('status', -1)}>\r\n                        <p\r\n                           role=\"button\"\r\n                           className={(sort.by === 'status' && sort.value === -1) ? 'dropdown-item sort_selected' : 'dropdown-item'}\r\n                        >Trạng Thái Ẩn</p>\r\n                     </li>\r\n                  </ul>\r\n               </button>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n      sort: state.sortTask\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n   return {\r\n      onSort: (sort) => {\r\n         dispatch(actions.sortTask(sort))\r\n      }\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sort)","import React from 'react'\r\nimport Search from './Search'\r\nimport Sort from './Sort'\r\n\r\nclass Control extends React.Component {\r\n   render() {\r\n      return (\r\n         <div className=\"row mt-20\">\r\n            {/* Search */}\r\n            <Search />\r\n            {/* End search */}\r\n\r\n            {/* Sort */}\r\n            <Sort />\r\n            {/* End sort */}\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Control","import React from 'react'\r\nimport * as actions from '../actions/index'\r\nimport { connect } from 'react-redux'\r\n\r\nclass ListItem extends React.Component {\r\n   handleUpdateTaskStatus = () => {\r\n      this.props.onUpdateTaskStatus(this.props.task.id)\r\n   }\r\n\r\n   handleDeleteTask = () => {\r\n      this.props.onDeleteTask(this.props.task.id)\r\n   }\r\n\r\n   handleEditTask = () => {\r\n      this.props.onOpenForm()\r\n      this.props.onEditTask(this.props.task)\r\n   }\r\n\r\n   render() {\r\n      var {task, index} = this.props\r\n\r\n      return (\r\n         <tr>\r\n            <td>{index + 1}</td>\r\n            <td>{task.name}</td>\r\n            <td className=\"text-center\">\r\n               <span\r\n                  className={task.status ? 'label label-success' : 'label label-danger'}\r\n                  onClick={this.handleUpdateTaskStatus}\r\n               >\r\n                  {task.status ? 'Kích Hoạt' : 'Ẩn'}\r\n               </span>\r\n            </td>\r\n            <td className=\"text-center\">\r\n               <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-warning\"\r\n                  onClick={this.handleEditTask}\r\n               >\r\n                  <i className=\"far fa-edit\"></i>&nbsp;\r\n                  Sửa\r\n               </button>&nbsp;\r\n               <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-danger\"\r\n                  onClick={this.handleDeleteTask}\r\n               >\r\n                  <i className=\"fas fa-trash\"></i>&nbsp;\r\n                  Xóa\r\n               </button>\r\n            </td>\r\n         </tr>\r\n      )\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n   return {\r\n      onUpdateTaskStatus: (id) => {\r\n         dispatch(actions.updateTaskStatus(id))\r\n      },\r\n      onDeleteTask: (id) => {\r\n         dispatch(actions.deleteTask(id))\r\n      },\r\n      onOpenForm: () => {\r\n         dispatch(actions.openForm())\r\n      },\r\n      onEditTask: (task) => {\r\n         dispatch(actions.editTask(task))\r\n      }\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListItem)","import React from 'react'\r\nimport ListItem from './ListItem'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../actions/index'\r\n\r\nclass TaskList extends React.Component {\r\n   handleChange = (event) => {\r\n      var target = event.target\r\n      var name = target.name\r\n      var value = target.value\r\n      \r\n      var filter = {\r\n         name: name === 'filterName' ? value : this.props.filterTable.name,\r\n         status: name === 'filterStatus' ? value : this.props.filterTable.status\r\n      }\r\n      this.props.onFilterTable(filter)\r\n   }\r\n\r\n   render() {\r\n      var { tasks, filterTable, keyword, sort } = this.props\r\n      \r\n      // filter on table\r\n      if (filterTable) {\r\n         if (filterTable.name) {\r\n            tasks = tasks.filter((task) => {\r\n               return task.name.toLowerCase().indexOf(filterTable.name) !== -1\r\n            })\r\n         }\r\n         tasks = tasks.filter((task) => {\r\n            if (filterTable.status === -1) {\r\n               return task\r\n            } else {\r\n               return task.status === (filterTable.status === 1 ? true : false)\r\n            }\r\n         })\r\n      }\r\n\r\n      // search\r\n      if (keyword) {\r\n         tasks = tasks.filter((task) => {\r\n            return task.name.toLowerCase().indexOf(keyword) !== -1\r\n         })\r\n      }\r\n\r\n      // sort\r\n      if (sort.by === 'name') {\r\n         tasks.sort((a, b) => {\r\n            if (a.name > b.name) return sort.value\r\n            else if (a.name < b.name) return -sort.value\r\n            else return 0\r\n         })\r\n      } else {\r\n         tasks.sort((a, b) => {\r\n            // if (a.status < b.status) return sort.value\r\n            // else if (a.status > b.status) return -sort.value\r\n            // else return 0\r\n            return a.status > b.status ? -sort.value : sort.value\r\n         })\r\n      }\r\n\r\n      var taskElement = tasks.map((task, index) => {\r\n         return <ListItem\r\n                  key={task.id}\r\n                  index={index}\r\n                  task={task}\r\n               />\r\n      })\r\n\r\n      return (\r\n         <table className=\"table\">\r\n            <thead>\r\n               <tr>\r\n                  <th>STT</th>\r\n                  <th>Tên</th>\r\n                  <th>Trạng Thái</th>\r\n                  <th>Hành Động</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               <tr>\r\n                  <td></td>\r\n                  <td>\r\n                     <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        name=\"filterName\"\r\n                        value={this.props.filterTable.name}\r\n                        onChange={this.handleChange}\r\n                     />\r\n                  </td>\r\n                  <td>\r\n                     <select\r\n                        className=\"form-control\"\r\n                        name=\"filterStatus\"\r\n                        value={this.props.filterTable.status}\r\n                        onChange={this.handleChange}\r\n                     >\r\n                        <option value={-1}>Tất Cả</option>\r\n                        <option value={0}>Ẩn</option>\r\n                        <option value={1}>Kích Hoạt</option>\r\n                     </select>\r\n                  </td>\r\n                  <td></td>\r\n               </tr>\r\n               {/* <ListItem /> */}\r\n               {taskElement}\r\n            </tbody>\r\n         </table>\r\n      )\r\n   }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n   return {\r\n      tasks: state.tasks,\r\n      filterTable: state.filterTable,\r\n      keyword: state.searchTask,\r\n      sort: state.sortTask\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n   return {\r\n      onFilterTable: (filter) => {\r\n         dispatch(actions.filterTable(filter))\r\n      }\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList)","import React from 'react'\r\nimport './App.css'\r\nimport TaskForm from './components/TaskForm'\r\nimport Control from './components/Control'\r\nimport TaskList from './components/TaskList'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from './actions/index'\r\n\r\nclass App extends React.Component {\r\n   handleToggleForm = () => {\r\n      var {taskEditing} = this.props\r\n      if (taskEditing && taskEditing.id !== '') {\r\n         this.props.onOpenForm()\r\n      } else {\r\n         this.props.onToggleForm()\r\n      }\r\n      this.props.onClearTask({\r\n         id: '',\r\n         name: '',\r\n         status: false\r\n      })\r\n   }\r\n\r\n   render() {\r\n      var { isDisplayForm } = this.props\r\n\r\n      var taskFormElement = isDisplayForm ? <TaskForm /> : ''\r\n\r\n      return (\r\n         <div className=\"container mt-20\">\r\n            <div className=\"text-center\">\r\n               <h1>Quản Lý Công Việc</h1>\r\n            </div>\r\n            <hr/>\r\n            <div className=\"row\">\r\n               {/* Form add work */}\r\n               <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n                  {/* <TaskForm /> */}\r\n                  {taskFormElement}\r\n               </div>\r\n               {/* End form add work */}\r\n\r\n               {/* Show */}\r\n               <div\r\n                  className={isDisplayForm ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8' : 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}\r\n               >\r\n                  <button\r\n                     type=\"button\"\r\n                     className=\"btn btn-primary\"\r\n                     onClick={this.handleToggleForm}\r\n                  >\r\n                     <i className=\"fas fa-plus\"></i>&nbsp;\r\n                     Thêm Công Việc\r\n                  </button>&nbsp;\r\n                  <br/>\r\n                  <Control />\r\n                  <br/>\r\n                  <div className=\"row\">\r\n                     <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n                        <TaskList />\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n               {/* End show */}\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      isDisplayForm: state.isDisplayForm,\r\n      taskEditing: state.isEditTask\r\n   }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n   return {\r\n      onToggleForm: () => {\r\n         dispatch(actions.toggleForm())\r\n      },\r\n      onClearTask: (task) => {\r\n         dispatch(actions.editTask(task))\r\n      },\r\n      onOpenForm: () => {\r\n         dispatch(actions.openForm())\r\n      }\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import * as types from '../constants/ActionTypes'\r\nimport _ from 'lodash'\r\n\r\nvar s4 = () => {\r\n   return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)\r\n}\r\n\r\nvar generateId = () => {\r\n   return s4() + s4() + '-' + s4() + s4() + '-' + s4() + s4() + s4() + s4() + '-' + s4() + s4() + s4() + s4() + '-' + s4() + s4()\r\n}\r\n\r\nvar data = JSON.parse(localStorage.getItem('tasks'))\r\nvar initialState = data ? data : []\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case types.SAVE_TASK:\r\n         var task = {\r\n            id: action.task.id,\r\n            name: action.task.name,\r\n            status: (action.task.status === 'true' || action.task.status === true) ? true : false\r\n         }\r\n         if (task.id === '') {\r\n            task.id = generateId()\r\n            state.push(task)\r\n         } else {\r\n            var indexSave = _.findIndex(state, (e) => {\r\n               return e.id === task.id\r\n            })\r\n            state[indexSave] = task\r\n         }\r\n         localStorage.setItem('tasks', JSON.stringify(state))\r\n         return [...state]\r\n\r\n      case types.UPDATE_TASK_STATUS:\r\n         var indexUpdate = _.findIndex(state, (e) => {\r\n            return e.id === action.id\r\n         })\r\n         state[indexUpdate] = {\r\n            ...state[indexUpdate],\r\n            status: !state[indexUpdate].status\r\n         }\r\n         localStorage.setItem('tasks', JSON.stringify(state))\r\n         return [...state]\r\n\r\n      case types.DELETE_TASK:\r\n         var indexDelete = _.findIndex(state, (e) => {\r\n            return e.id === action.id\r\n         })\r\n         state.splice(indexDelete, 1)\r\n         localStorage.setItem('tasks', JSON.stringify(state))\r\n         return [...state]\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport default myReducer","import * as types from '../constants/ActionTypes'\r\n\r\nvar initialState = false // close form\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case types.TOGGLE_FORM:\r\n         return !state\r\n      case types.CLOSE_FORM:\r\n         return false\r\n      case types.OPEN_FORM:\r\n         return true\r\n      default: return state\r\n   }\r\n}\r\n\r\nexport default myReducer","import * as types from '../constants/ActionTypes'\r\n\r\nvar initialState = {\r\n   id: '',\r\n   name: '',\r\n   status: false\r\n}\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case types.EDIT_TASK:\r\n         state = {...action.task}\r\n         return {...state}\r\n      default: \r\n         return state\r\n   }\r\n}\r\n\r\nexport default myReducer","import * as types from '../constants/ActionTypes'\r\n\r\nvar initialState = {\r\n   name: '',\r\n   status: -1\r\n}\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case types.FILTER_TABLE:\r\n         action.filter.status = parseInt(action.filter.status, 10)\r\n         state = {...action.filter}\r\n         return {...state}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport default myReducer","import * as types from '../constants/ActionTypes'\r\n\r\nvar initialState = ''\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case types.SEARCH:\r\n         state = action.keyword\r\n         return state\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport default myReducer","import * as types from '../constants/ActionTypes'\r\n\r\nvar initialState = {\r\n   by: 'name',\r\n   value: 1\r\n}\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case types.SORT:\r\n         state = {...action.sort}\r\n         return {...state}\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\nexport default myReducer","import { combineReducers } from 'redux'\r\nimport tasks from './tasks'\r\nimport isDisplayForm from './isDisplayForm'\r\nimport isEditTask from './isEditTask'\r\nimport filterTable from './filterTable'\r\nimport searchTask from './searchTask'\r\nimport sortTask from './sortTask'\r\n\r\nconst myReducer = combineReducers({\r\n   tasks,\r\n   isDisplayForm,\r\n   isEditTask,\r\n   filterTable,\r\n   searchTask,\r\n   sortTask,\r\n})\r\n\r\nexport default myReducer","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { createStore } from 'redux'\r\nimport myReducer from './reducers/index'\r\nimport { Provider } from 'react-redux'\r\n\r\nconst store = createStore(\r\n   myReducer,\r\n   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nReactDOM.render(\r\n   <Provider store={ store }>\r\n      <App />\r\n   </Provider>,\r\n   document.getElementById('root')\r\n)"],"sourceRoot":""}